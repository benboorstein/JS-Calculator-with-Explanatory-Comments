/* Always use this, as Brian Holt advises. It makes the size ("width", for example) of every element equal to the element's content + its padding + its border, and not inclusive of margin of course. */
* {
    box-sizing: border-box;
}

body {
    padding: 0;
    margin: 0;
}

.calc {
    width: 400px;
    background-color: black;
    color: white;
}

.screen {
    font-size: 40px;
    font-family: 'Courier New', Courier, monospace;
    text-align: right;
    padding: 20px 5px;
}

.calc-button {
    background-color: #d8d9db;
    color: black;
    height: 100px;
    width: 24.5%;
    border: none;
    border-radius: 0;
    font-size: 40px;
    cursor: pointer;
}

.calc-button:hover {
    background-color: #ebebeb;
}

.calc-button:active {
    background-color: #bbbcbe;
}

.calc-button:last-child {
    background-color: #df974c; /* Remember VS Code has a built-in color picker; just hover on the color */
    color: white;
}

.calc-button:last-child:hover {
    background-color: #dfb07e;
}

.calc-button:last-child:active {
    background-color: #dd8d37;
}

.double {
    width: 49.7%;
}

.triple {
    width: 74.8%;
}

.calc-row {
    display: flex;
    justify-content: space-between;
    align-content: stretch; /* Holt says won't actually do anything because heights are already set */
    margin-bottom: 0.5%;
}



  
  
  
  
  
  
  
  
  
  
  
  
/* KEEP THIS AS A REFERENCE:
parent {
    display: flex;    mandatory 
    flex-direction: ;    row (default) | row-reverse | column | column-reverse 
    justify-content: ;    flex-start (default) | flex-end | center | space-between | space-around | space-evenly 
    align-items: ;    flex-start | flex-end | center | (baseline) | stretch (default) 
    flex-wrap: ;    nowrap (default) | wrap | wrap-reverse 
    align-content: ;    flex-start | flex-end | center | space-between | space-around | stretch (default) 
}
  
child {
    align-self: ;    flex-start | flex-end | center | (baseline) | stretch (default)
    flex-grow: ;    0 is default 
    flex-shrink: ;    1 is default 
    flex-basis: ;    auto is default 
    order: ;    0 is default
  
    flex: [flex-grow number, flex-shrink number, flex-basis number];    this is a way (instead of using % outside of Flexbox) to set relative sizes of elements. (This is how I THOUGHT 'flex-grow' worked.) An example is 'flex: 1 1 0;' (the shorthand for which is the oft used 'flex: 1;').
    
    margin-top: auto;    this puts the element at the bottom.
}
*/